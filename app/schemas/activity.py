from pydantic import BaseModel, Field
from typing import Optional, Annotated
from datetime import datetime

class UserActivity(BaseModel):
    """
    Schema for logging a user's activity.
    The 'timestamp' field is generated by the server/database, so it's not included here.
    """
    user_id: Annotated[int, Field(description="ID of the user performing or associated with the activity.")]
    activity_type: Annotated[str, Field(max_length=50, description="Type of activity (e.g., 'login', 'logout', 'password_change', 'profile_update').")]
    ip_address: Annotated[Optional[str], Field(None, max_length=45, description="IP address from where the activity originated.")]
    user_agent: Annotated[Optional[str], Field(None, max_length=255, description="User-Agent string of the client.")]
    details: Annotated[Optional[str], Field(None, description="Additional details about the activity.")]

    # 'created_at' or 'timestamp' is typically generated by the server/DB,
    # so it's removed from the input schema.

class ActivityLogResponse(BaseModel):
    """
    Schema for responding with a retrieved activity log.
    Matches the fields from the ActivityLog SQLAlchemy model and includes username from User model.
    """
    id: int
    user_id: int
    username: Optional[str] = Field(None, description="Username of the user associated with the activity.") # NEW: Added username
    activity_type: str
    ip_address: Optional[str]
    user_agent: Optional[str]
    details: Optional[str]
    timestamp: datetime # Renamed from 'created_at' to 'timestamp' to match ActivityLog model

    class Config:
        from_attributes = True # Essential for Pydantic to convert SQLAlchemy models

